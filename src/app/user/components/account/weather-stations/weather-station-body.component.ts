import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { UserProfileService } from "@app/shared/services/upr/user-profile.service";
import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Farm } from "@app/shared/models/farm.model";
import { ToastrTranslationService } from "@app/shared/services/toastr-translation.service";
import { UserWeatherStationInfo } from '@app/shared/models/weather-data-source.model';
import { FarmService } from '@app/shared/services/upr/farm.service';
import { FarmResponseModel } from '@app/shared/models/farm-response.model';

@Component({
    selector: '[app-weather-station-body]',
    templateUrl: './weather-station-body.component.html',
    styleUrls: ['./weather-station-body.component.css']
  })
export class WeatherStationBodyComponent implements OnInit, OnChanges {

    @Input() weatherStation: UserWeatherStationInfo;

    @Output() Close: EventEmitter<string> = new EventEmitter();
    @Output() farmsUpdate: EventEmitter<{weatherId: string, farms: Farm[]}> = new EventEmitter();

    farmList: Farm[];
    associatedFarms: Farm[];
    nonAssociatedFarms: Farm[];

    selectedFarmsForAssociation: string[] = [];
    selectedFarmsForDisassociation: string[] = [];

    isTheFarmSelectedForAssociation: boolean[] = [];
    isTheFarmSelectedForDisassociation: boolean[] = [];

    noFarmsAvailable: boolean = false;
    noAssociatedFarms: boolean = false;

    constructor(
        private _farmService: FarmService,
        private _userProfileService: UserProfileService,
        private _toastrTranslated: ToastrTranslationService
    ) {
    
    }


    ngOnChanges(changes: SimpleChanges): void {
        if(this.farmList){
            this.splitFarmList();
        }
    }

    ngOnInit(): void {
        this.getAllFarms();
    }

    initSelectionArrays(){

        this.isTheFarmSelectedForAssociation = [];
        this.isTheFarmSelectedForDisassociation = [];

        for (let index = 0; index < this.associatedFarms.length; index++) { 
            this.isTheFarmSelectedForDisassociation.push(false);
        }

        for (let index = 0; index < this.nonAssociatedFarms.length; index++) { 
            this.isTheFarmSelectedForAssociation.push(false);
        }
    }

    getAllFarms(){
        this._farmService.getAllFarms().subscribe(
            (response: HttpResponse<FarmResponseModel>) => {
                const farms = response.body.value;
                farms.forEach((farm) => {
                    if(!(farm.name === "Autogenerated_ExternalDss_Farm")) {
                      this._farmService.getAddressFromCoordinates(farm.location.y, farm.location.x).subscribe( (data) => farm.location.address = data);
                    }      
                });
                this.farmList = farms;
                this.removeAutogeneratedFarmFromList();
                if(this.farmList.length == 0){
                    this.noFarmsAvailable = true;
                    this.noAssociatedFarms = true;
                    this._toastrTranslated.showTranslatedToastr("Information_messages.No_farms_available",
                                                                "Common_labels.Warning",
                                                                "toast-warning");
                }else{
                    this.splitFarmList();
                }
            }
        );
    }

    splitFarmList(){

        this.associatedFarms = [];
        this.nonAssociatedFarms = [];

        for (let index = 0; index < this.farmList.length; index++) { 
            if(this.weatherStation.farms.find((farm) => farm.id === this.farmList[index].id) === undefined){
                this.nonAssociatedFarms.push(this.farmList[index]);
            }else{
                this.associatedFarms.push(this.farmList[index]);
            }
        }

        if(this.nonAssociatedFarms.length === 0){
            this.noFarmsAvailable = true;
        }else{
            this.noFarmsAvailable = false;
        }
        if(this.associatedFarms.length === 0){
            this.noAssociatedFarms = true;
        }else{
            this.noAssociatedFarms = false;
        }

        this.initSelectionArrays();
    }

    closeInfo(){
        this.Close.emit();
    }


    selectFarm(selectedFarmId: string, operation: string, index: number){
        if(operation === "Association"){
            this._userProfileService.getAllUserWeatherStations().subscribe(
                (response: HttpResponse<UserWeatherStationInfo[]>) => {
                    let isTheFarmAlreadyAssociatedWithAnotherWeatherStation = false;
                    for(let userWeatherStation of response.body){
                        if(userWeatherStation.farms.find((farm) => farm.id === selectedFarmId)){
                            this._toastrTranslated.showTranslatedToastr("Warning_messages.Farm_already_associated",
                                                                        "Common_labels.Warning",
                                                                        "toast-warning");
                            isTheFarmAlreadyAssociatedWithAnotherWeatherStation = true;
                            break;
                        } 
                    }
                    if(!isTheFarmAlreadyAssociatedWithAnotherWeatherStation){
                        this.selectedFarmsForAssociation.push(selectedFarmId);
                        this.isTheFarmSelectedForAssociation[index] = true;
                    }   
                },
                (error: HttpErrorResponse) => {
                    this._toastrTranslated.showTranslatedToastr("Error_messages.User_weather_stations_retrieve_error",
                                                                "Common_labels.Error",
                                                                "toast-error");
                }
            )
            
        }else{
            this.selectedFarmsForDisassociation.push(selectedFarmId);
            this.isTheFarmSelectedForDisassociation[index] = true;
        }
    }

    deselectFarm(selectedFarmId:string, operation: string, index: number){
        let elementIndex;
        if(operation === "Association"){
            elementIndex = this.selectedFarmsForAssociation.indexOf(selectedFarmId);
            this.selectedFarmsForAssociation.splice(elementIndex, 1);
            this.isTheFarmSelectedForAssociation[index] = false;
        }else{
            elementIndex = this.selectedFarmsForDisassociation.indexOf(selectedFarmId);
            this.selectedFarmsForDisassociation.splice(elementIndex, 1);
            this.isTheFarmSelectedForDisassociation[index] = false;
        }
    }


    private removeAutogeneratedFarmFromList():void {
        for (let i = 0; i < this.farmList.length; i++) {
          if (this.farmList[i].name === "Autogenerated_ExternalDss_Farm") {
            this.farmList.splice(i--, 1);
          }
        }
    }


    associateFarmsToWeatherStation(){
        this._userProfileService.addFarmsToWeatherStation(this.selectedFarmsForAssociation, this.weatherStation.id).subscribe(
            (response: HttpResponse<any>) => {
                
                this._toastrTranslated.showTranslatedToastr("Information_messages.Farm_associated",
                                                            "Common_labels.Success",
                                                            "toast-success");
                for (var farmId of this.selectedFarmsForAssociation) {
                    this.weatherStation.farms.push(this.nonAssociatedFarms.find((farm) => farm.id === farmId));
                }                                         
                this.refreshFarmLists();
                this.farmsUpdate.emit({weatherId: this.weatherStation.weatherId, farms: this.weatherStation.farms});
            },
            (error: HttpErrorResponse) => {
                this._toastrTranslated.showTranslatedToastr("Error_messages.Farm_association_error",
                                                            "Common_labels.Error",
                                                            "toast-error");
            }
        );
    }

    disassociateFarmsFromWeatherStation(){
        this._userProfileService.deleteFarmsFromWeatherStation(this.selectedFarmsForDisassociation, this.weatherStation.id).subscribe(
            (response: HttpResponse<any>) => {
                
                this._toastrTranslated.showTranslatedToastr("Information_messages.Farm_disassociated",
                                                            "Common_labels.Success",
                                                            "toast-success");
                for (var farmId of this.selectedFarmsForDisassociation) {
                    let elementIndex =  this.weatherStation.farms.indexOf(this.associatedFarms.find((farm) => farm.id === farmId));
                    this.weatherStation.farms.splice(elementIndex, 1);
                }                                        
                this.refreshFarmLists();
                this.farmsUpdate.emit({weatherId: this.weatherStation.weatherId, farms: this.weatherStation.farms});
            },
            (error: HttpErrorResponse) => {
                this._toastrTranslated.showTranslatedToastr("Error_messages.Farm_disassociation_error",
                                                            "Common_labels.Error",
                                                            "toast-error");
            }

        );
    }


    refreshFarmLists(){

        this.splitFarmList();
        this.selectedFarmsForAssociation = [];
        this.selectedFarmsForDisassociation = [];

    }

}